{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Avenir-Book;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid101\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid201\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid301\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid401\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid402\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid501\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}}
\margl1440\margr1440\vieww7000\viewh16380\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs22 \cf0 __Actionable__\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}figure out \'91base case\'92 for random search. Do we stop on the first iteration that doesn\'92t give us any directions that lower the value of the cost function??\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
__Snippets__\
Prof\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\'93Just posted HW1.  The intention with w_history and cost_history is simply to keep track of the points you go through and what value the function has in those points. Since we're trying to minimize a function the 'cost' is simply the function it self.\'94\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
TAs being stupid un-self-aware bitches\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\'93First, I should say that the assignment is fairly straightforward, and you shouldn\'92t have any issues if you read the questions carefully and do what is being asked of you.\'94\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
Outtakes\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls4\ilvl0\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\'93Our parameters: `g` is the function we want to minimize. It is a cost function representing the performance of a model we've built to understand or make predictions about a dataset. `w` is the value -- or rather a vector of values (representing a point in the input space of `g`) -- with respect to which we are minimizing `g`. `alpha_choice` is our 'learning rate' \'93\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
__Resources__\
Generating unit vectors for random search direction\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	} (why do we using randn() (returns normally distributed values N(0,1)) vs (b - a) * np.random.random_sample() + a (normally distributed reals between a and b))\
{\listtext	
\f1 \uc0\u8259 
\f0 	}{\field{\*\fldinst{HYPERLINK "https://towardsdatascience.com/the-best-way-to-pick-a-unit-vector-7bd0cc54f9b"}}{\fldrslt The Best Way to Pick a Unit Vector - Don Cross}}\
\pard\tx940\tx1440\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}beautiful explanation!!\
{\listtext	
\f1 \uc0\u8259 
\f0 	}\'93As you make the grid smaller and smaller, with the gap between the lines approaching zero, the number of points in each region becomes arbitrarily proportional to the respective enclosed areas. The diagonal region contains more area than the horizontal region. If you imagine randomly throwing a dart at a dartboard, it is more likely to strike a region having larger area.\'94\
{\listtext	
\f1 \uc0\u8259 
\f0 	}\'93A point chosen using uniform Cartesian coordinates is thus more likely to occur along a diagonal than an orthogonal. The simple approach fails the bias test: it does not pick from all directions with equal probability.\'94\
{\listtext	
\f1 \uc0\u8259 
\f0 	}\'93In this two-dimensional case, an effective alternative is to pick a random angle 
\f1 \uc0\u952 
\f0  in the half-open range [0, 2\uc0\u960 ). Then the unbiased unit vector becomes (cos 
\f1 \uc0\u952 
\f0 , sin 
\f1 \uc0\u952 
\f0 ). However, this only works in the two-dimensional case. We want a solution that works in any positive number of dimensions n.\'94\
{\listtext	
\f1 \uc0\u8259 
\f0 	}\'93This suggests a modified algorithm: pick a series of random coordinates for each vector component, but reject the pick if it lies outside the circle, sphere, or hypersphere for the n-dimensional space. In other words, keep picking another batch of n random numbers until they satisfy\'94\
{\listtext	
\f1 \uc0\u8259 
\f0 	}\'93This approach works well for two or three dimensions, but there is a problem in the general case.\'94\
{\listtext	
\f1 \uc0\u8259 
\f0 	}\'93As n increases, it becomes increasingly likely that the sum will exceed 1. With a high enough dimension count, your program will spend more and more time looping until it finds a point inside a unit radius.\'94\
{\listtext	
\f1 \uc0\u8259 
\f0 	}\'93Because a uniform random distribution isn\'92t suited to picking an unbiased direction in space, the solution to the problem is to find some non-uniform distribution that compensates for any directional bias. The desired distribution will cancel out any artificial bias introduced by the choice of coordinate axes."\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
numpy vs autograd-wrapped numpy\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}sounds like autogrid just decks out numpy\
{\listtext	
\f1 \uc0\u8259 
\f0 	}BUT IntelliSense in vscode does not seem very good for autogrid numpy.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
}